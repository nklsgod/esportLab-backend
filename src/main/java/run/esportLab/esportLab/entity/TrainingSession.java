package run.esportLab.esportLab.entity;

import jakarta.persistence.*;
import lombok.*;
import org.hibernate.annotations.CreationTimestamp;

import java.time.ZonedDateTime;

@Entity
@Table(name = "training_session")
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class TrainingSession {
    
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "team_id", nullable = false)
    private Team team;
    
    @Column(name = "starts_at_utc", nullable = false)
    private ZonedDateTime startsAtUtc;
    
    @Column(name = "ends_at_utc", nullable = false)
    private ZonedDateTime endsAtUtc;
    
    @Enumerated(EnumType.STRING)
    @Column(nullable = false)
    private Source source;
    
    @Column
    private String title;
    
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "created_by_member_id")
    private Member createdByMember;
    
    @CreationTimestamp
    @Column(name = "created_at", nullable = false, updatable = false)
    private ZonedDateTime createdAt;
    
    // Enum for source type
    public enum Source {
        AUTO,
        MANUAL
    }
    
    // Helper methods
    public boolean isAutoGenerated() {
        return Source.AUTO.equals(source);
    }
    
    public boolean isManuallyCreated() {
        return Source.MANUAL.equals(source);
    }
    
    // Get duration in minutes
    public long getDurationMinutes() {
        return java.time.Duration.between(startsAtUtc, endsAtUtc).toMinutes();
    }
    
    // Check if this session overlaps with another time range
    public boolean overlapsWith(ZonedDateTime otherStart, ZonedDateTime otherEnd) {
        return startsAtUtc.isBefore(otherEnd) && endsAtUtc.isAfter(otherStart);
    }
    
    // Validation helper
    public boolean isValidTimeRange() {
        return startsAtUtc != null && endsAtUtc != null && startsAtUtc.isBefore(endsAtUtc);
    }
    
    // Generate default title if not set
    public String getEffectiveTitle() {
        if (title != null && !title.trim().isEmpty()) {
            return title;
        }
        
        if (isAutoGenerated()) {
            return "Training Session (Auto-generated)";
        } else {
            return "Training Session";
        }
    }
}