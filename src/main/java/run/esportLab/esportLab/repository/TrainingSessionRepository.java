package run.esportLab.esportLab.repository;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;
import run.esportLab.esportLab.entity.TrainingSession;

import java.time.ZonedDateTime;
import java.util.List;

@Repository
public interface TrainingSessionRepository extends JpaRepository<TrainingSession, Long> {
    
    /**
     * Find all training sessions for a specific team
     */
    List<TrainingSession> findByTeamId(Long teamId);
    
    /**
     * Find training sessions for a team within a time range
     */
    @Query("SELECT ts FROM TrainingSession ts WHERE ts.team.id = :teamId " +
           "AND ts.startsAtUtc < :endTime AND ts.endsAtUtc > :startTime " +
           "ORDER BY ts.startsAtUtc")
    List<TrainingSession> findByTeamIdAndTimeRange(
            @Param("teamId") Long teamId,
            @Param("startTime") ZonedDateTime startTime,
            @Param("endTime") ZonedDateTime endTime
    );
    
    /**
     * Find training sessions for a team in a specific week
     */
    @Query("SELECT ts FROM TrainingSession ts WHERE ts.team.id = :teamId " +
           "AND ts.startsAtUtc >= :weekStart AND ts.startsAtUtc < :weekEnd " +
           "ORDER BY ts.startsAtUtc")
    List<TrainingSession> findByTeamIdAndWeek(
            @Param("teamId") Long teamId,
            @Param("weekStart") ZonedDateTime weekStart,
            @Param("weekEnd") ZonedDateTime weekEnd
    );
    
    /**
     * Find auto-generated training sessions for a team within a time range
     */
    @Query("SELECT ts FROM TrainingSession ts WHERE ts.team.id = :teamId " +
           "AND ts.source = 'AUTO' " +
           "AND ts.startsAtUtc < :endTime AND ts.endsAtUtc > :startTime " +
           "ORDER BY ts.startsAtUtc")
    List<TrainingSession> findAutoGeneratedByTeamIdAndTimeRange(
            @Param("teamId") Long teamId,
            @Param("startTime") ZonedDateTime startTime,
            @Param("endTime") ZonedDateTime endTime
    );
    
    /**
     * Find manually created training sessions for a team within a time range
     */
    @Query("SELECT ts FROM TrainingSession ts WHERE ts.team.id = :teamId " +
           "AND ts.source = 'MANUAL' " +
           "AND ts.startsAtUtc < :endTime AND ts.endsAtUtc > :startTime " +
           "ORDER BY ts.startsAtUtc")
    List<TrainingSession> findManualByTeamIdAndTimeRange(
            @Param("teamId") Long teamId,
            @Param("startTime") ZonedDateTime startTime,
            @Param("endTime") ZonedDateTime endTime
    );
    
    /**
     * Find training sessions created by a specific member
     */
    List<TrainingSession> findByCreatedByMemberId(Long createdByMemberId);
    
    /**
     * Find upcoming training sessions for a team
     */
    @Query("SELECT ts FROM TrainingSession ts WHERE ts.team.id = :teamId " +
           "AND ts.startsAtUtc > :now " +
           "ORDER BY ts.startsAtUtc")
    List<TrainingSession> findUpcomingByTeamId(
            @Param("teamId") Long teamId,
            @Param("now") ZonedDateTime now
    );
    
    /**
     * Find training sessions that need reminder (1 day before)
     */
    @Query("SELECT ts FROM TrainingSession ts WHERE " +
           "ts.startsAtUtc > :reminderTime AND ts.startsAtUtc <= :reminderTimeEnd " +
           "ORDER BY ts.startsAtUtc")
    List<TrainingSession> findSessionsNeedingOneDayReminder(
            @Param("reminderTime") ZonedDateTime reminderTime,
            @Param("reminderTimeEnd") ZonedDateTime reminderTimeEnd
    );
    
    /**
     * Find training sessions that need reminder (2 hours before)
     */
    @Query("SELECT ts FROM TrainingSession ts WHERE " +
           "ts.startsAtUtc > :reminderTime AND ts.startsAtUtc <= :reminderTimeEnd " +
           "ORDER BY ts.startsAtUtc")
    List<TrainingSession> findSessionsNeedingTwoHourReminder(
            @Param("reminderTime") ZonedDateTime reminderTime,
            @Param("reminderTimeEnd") ZonedDateTime reminderTimeEnd
    );
    
    /**
     * Delete old training sessions (cleanup)
     */
    @Query("DELETE FROM TrainingSession ts WHERE ts.endsAtUtc < :cutoffDate")
    void deleteOldTrainingSessions(@Param("cutoffDate") ZonedDateTime cutoffDate);
    
    /**
     * Delete auto-generated training sessions for a team in a specific time range
     * (used when regenerating sessions)
     */
    @Query("DELETE FROM TrainingSession ts WHERE ts.team.id = :teamId " +
           "AND ts.source = 'AUTO' " +
           "AND ts.startsAtUtc >= :startTime AND ts.endsAtUtc <= :endTime")
    void deleteAutoGeneratedInTimeRange(
            @Param("teamId") Long teamId,
            @Param("startTime") ZonedDateTime startTime,
            @Param("endTime") ZonedDateTime endTime
    );
}